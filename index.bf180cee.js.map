{"mappings":"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","sources":["src/js/util/util.js","src/js/util/dom-events.js","src/js/util/viewport-size.js","src/js/slide/pan-bounds.js","src/js/slide/zoom-level.js","src/js/slide/slide.js","src/js/gestures/drag-handler.js","src/js/gestures/zoom-handler.js","src/js/gestures/tap-handler.js","src/js/gestures/gestures.js","src/js/main-scroll.js","src/js/keyboard.js","src/js/util/css-animation.js","src/js/util/spring-easer.js","src/js/util/spring-animation.js","src/js/util/animations.js","src/js/scroll-wheel.js","src/js/ui/ui-element.js","src/js/ui/button-arrow.js","src/js/ui/button-close.js","src/js/ui/button-zoom.js","src/js/ui/loading-indicator.js","src/js/ui/counter-indicator.js","src/js/ui/ui.js","src/js/slide/get-thumb-bounds.js","src/js/core/eventable.js","src/js/slide/placeholder.js","src/js/slide/content.js","src/js/slide/loader.js","src/js/core/base.js","src/js/opener.js","src/js/photoswipe.js","src/js/lightbox/lightbox.js","index.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement=} element thumbnail element\r\n * @prop {string=} src image URL\r\n * @prop {string=} srcset image srcset\r\n * @prop {number=} w image width (deprecated)\r\n * @prop {number=} h image height (deprecated)\r\n * @prop {number=} width image width\r\n * @prop {number=} height image height\r\n * @prop {string=} msrc placeholder image URL that's displayed before large image is loaded\r\n * @prop {string=} alt image alt text\r\n * @prop {boolean=} thumbCropped whether thumbnail is cropped client-side or not\r\n * @prop {string=} html html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {ElementProvider=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {ElementProvider=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not ideal way to detect them.\r\n    //\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   * @param {{ x?: number; y?: number }} [initialPoint]\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name].forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name].forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = null;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = null;\r\n      window.pswp = null;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    if (this.pswp) {\r\n      this.pswp.destroy();\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = null;\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n","import \"@fontsource/poppins\";\r\nimport \"photoswipe/dist/photoswipe.css\"\r\nimport PhotoSwipe from 'photoswipe/dist/photoswipe.esm';\r\nimport \"./gallery.css\"\r\n\r\n\r\nimport Lightbox from 'photoswipe/dist/photoswipe-lightbox.esm';\r\nconst lightbox = new Lightbox({\r\n  gallery: '#gallery',\r\n  children: 'a',\r\n  pswpModule: PhotoSwipe\r\n});\r\nlightbox.init();\r\n\r\n"],"names":["$f26a9b730ef64151$var$createElement","className","tagName","appendToEl","el","document","createElement","appendChild","$f26a9b730ef64151$var$equalizePoints","p1","p2","x","y","undefined","id","$f26a9b730ef64151$var$roundPoint","p","Math","round","$f26a9b730ef64151$var$getDistanceBetween","abs","sqrt","$f26a9b730ef64151$var$pointsEqual","$f26a9b730ef64151$var$clamp","val","min","max","$f26a9b730ef64151$var$toTransformString","scale","propValue","$f26a9b730ef64151$var$setTransform","transform","$f26a9b730ef64151$var$setTransitionStyle","prop","duration","ease","style","transition","$f26a9b730ef64151$var$setWidthHeight","w","h","width","height","$f26a9b730ef64151$var$LOAD_STATE","$f26a9b730ef64151$var$isSafari","navigator","vendor","match","addEventListener","Object","defineProperty","get","$f26a9b730ef64151$var$supportsPassive","e","$f26a9b730ef64151$var$DOMEvents","this","_pool","type","listener","passive","_toggleListener","target","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","$f26a9b730ef64151$var$getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","$f26a9b730ef64151$var$parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","$f26a9b730ef64151$var$getPanAreaSize","$f26a9b730ef64151$var$PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","data","panAreaSize","panOffset","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","slideData","optionPrefix","optionName","optionValue","Number","_parseZoomLevelOption","$f26a9b730ef64151$var$Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","zoomLevels","$f26a9b730ef64151$var$ZoomLevel","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","heavyAppended","mainScroll","isShifted","applyCurrentZoomPan","hasSlide","remove","panTo","scaleMultiplier","force","setDisplayedSize","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","stopAllPan","calculateZoomToPanOffset","prevZoomLevel","_setResolution","startTransition","getCurrentTransform","onComplete","finishTransition","easing","toggleZoom","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","currSlide","_applyZoomTransform","zoom","newResolution","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","animations","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","$f26a9b730ef64151$var$project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","name","isPan","start","pos","animationProgressRatio","floor","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","$f26a9b730ef64151$var$getZoomPointsCenter","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","_wasOverFitZoomLevel","pinchToClose","defaultPrevented","_calculatePanForZoomLevel","setZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","now","newZoomLevel","$f26a9b730ef64151$var$didTapOnMainContent","event","closest","$f26a9b730ef64151$var$TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","actionName","actionFullName","clickToCloseNonZoomable","toggle","call","$f26a9b730ef64151$var$Gestures","prevP2","_lastStartP1","_intervalP1","_ongoingPointers","PointerEvent","_touchEventEnabled","_pointerEventEnabled","maxTouchPoints","supportsTouch","drag","$f26a9b730ef64151$var$DragHandler","$f26a9b730ef64151$var$ZoomHandler","add","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","events","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_numActivePoints","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","change","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapHandler","tapDelay","doubleTapAction","_tapTimer","doubleTap","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","$f26a9b730ef64151$var$MainScroll","slideWidth","itemHolders","spacing","slideWidthChanged","newSlideWidth","itemHolder","_containerShiftIndex","resizeSlides","resize","resetPosition","_currPositionIndex","_prevPositionIndex","appendHolders","i","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","naturalFrequency","onUpdate","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","$f26a9b730ef64151$var$Keyboard","constructor","on","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","ctrlKey","metaKey","altKey","shiftKey","$f26a9b730ef64151$var$specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","$f26a9b730ef64151$var$CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","removeEventListener","$f26a9b730ef64151$var$SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","$f26a9b730ef64151$var$SpringAnimation","easer","prevTime","animationLoop","_raf","easeFrame","$f26a9b730ef64151$var$Animations","activeAnimations","_start","isSpring","animation","stop","destroy","isMainScroll","some","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","innerHTML","htmlData","isCustomSVG","out","join","svgData","size","outlineID","inner","$f26a9b730ef64151$var$addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","$f26a9b730ef64151$var$initArrowButton","isNextButton","loop","disabled","$f26a9b730ef64151$var$arrowPrev","$f26a9b730ef64151$var$arrowNext","order","$f26a9b730ef64151$var$closeButton","$f26a9b730ef64151$var$zoomButton","$f26a9b730ef64151$var$loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","$f26a9b730ef64151$var$counterIndicator","counterElement","innerText","indexIndicatorSep","$f26a9b730ef64151$var$setZoomedIn","isZoomedIn","_lastUpdatedZoomLevel","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","$f26a9b730ef64151$var$UIElement","isClosing","currZoomLevelDiff","imageClickAction","$f26a9b730ef64151$var$PhotoSwipeEvent","details","assign","$f26a9b730ef64151$var$Eventable","_listeners","_filters","fn","priority","f1","f2","addFilter","removeFilter","args","apply","off","imageSrc","decoding","alt","src","parentNode","$f26a9b730ef64151$var$Content","instance","displayedImageWidth","displayedImageHeight","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","$f26a9b730ef64151$var$Placeholder","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","img","decode","catch","Promise","resolve","reject","$12ba7f17b3976b6d$var$createElement","$12ba7f17b3976b6d$var$setWidthHeight","$12ba7f17b3976b6d$var$LOAD_STATE","$12ba7f17b3976b6d$var$getElementsFromOption","$12ba7f17b3976b6d$var$isSafari","$12ba7f17b3976b6d$var$PhotoSwipeEvent","$12ba7f17b3976b6d$var$toTransformString","$12ba7f17b3976b6d$var$Content","$12ba7f17b3976b6d$var$Placeholder","onError","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","errorMsgEl","errorMsg","supportsDecode","isDecoding","finally","appendImage","which","prototype","goTo","gallery","children","pswpModule","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","imageWidth","imageHeight","getBoundingClientRect","thumbAreaRect","fillZoomLevel","offsetX","offsetY","left","top","$f26a9b730ef64151$var$getCroppedBoundsByElement","$f26a9b730ef64151$var$getBoundsByElement","init"],"version":3,"file":"index.bf180cee.js.map"}